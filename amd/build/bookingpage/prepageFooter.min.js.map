{"version":3,"file":"prepageFooter.min.js","sources":["../../src/bookingpage/prepageFooter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookingpage/prepageFooter\n * @copyright  Wunderbyte GmbH\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport { continueToNextPage, backToPreviousPage, setBackModalVariables } from 'mod_booking/bookit';\nimport { reloadAllTables } from 'local_wunderbyte_table/reload';\n\nconst SELECTORS = {\n    MODALID: 'sbPrePageModal_',\n    INLINEID: 'sbPrePageInline_',\n    INMODALDIV: ' div.modalMainContent',\n    INMODALFOOTER: ' div.prepage-booking-footer',\n    INMODALBUTTON: 'div.in-modal-button',\n    BOOKITBUTTON: 'div.booking-button-area',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/**\n * Add the click listener to a prepage modal button.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {boolean} shoppingcartisinstalled\n */\nexport function initFooterButtons(optionid, userid, shoppingcartisinstalled) {\n\n    // eslint-disable-next-line no-console\n    console.log('initFooterButtons', optionid);\n\n    // Find inline footer anchors first (inline mode).\n    let selectorInline = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"]' + SELECTORS.INMODALFOOTER + ' a';\n    let elements = Array.from(document.querySelectorAll(selectorInline));\n\n    if (elements.length === 0) {\n        // fallback: try modal-based\n        let selectorModal = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"]' + SELECTORS.INMODALFOOTER + ' a';\n        elements = Array.from(document.querySelectorAll(selectorModal));\n\n        // Every time we close the modal, reset to the first prepage.\n        const modalSelectorAll = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"]';\n        const modalEls = Array.from(document.querySelectorAll(modalSelectorAll));\n        modalEls.forEach(modalEl => {\n            // listen to hide.bs.modal\n            modalEl.addEventListener('hide.bs.modal', () => {\n                setBackModalVariables(optionid);\n            });\n        });\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('buttons found', elements);\n\n    elements.forEach(element => {\n        if (!element || element.dataset.initialized) {\n            return;\n        }\n        // Mark initialized\n        element.dataset.initialized = '1';\n\n        const action = element.dataset.action;\n\n        // eslint-disable-next-line no-console\n        console.log(element, action);\n\n        // Pre-actions executed immediately for some actions (shopping cart reinit).\n        switch (action) {\n            case 'closeinline':\n            case 'continuepost':\n            case 'checkout':\n                // eslint-disable-next-line no-console\n                console.log('closeinline/checkout/continuepost', action);\n                if (shoppingcartisinstalled) {\n                    // dynamic import of cart module â€” adapt to module export shape.\n                    import('local_shopping_cart/cart')\n                        .then(module => {\n                            // module may export default or named exports; support both.\n                            const cart = module.default ?? module;\n                            // eslint-disable-next-line no-console\n                            console.log('cart module loaded', cart);\n                            const oncashier = window.location.href.indexOf('cashier.php');\n                            if (typeof cart.reinit === 'function') {\n                                if (oncashier > 0) {\n                                    cart.reinit(-1);\n                                } else {\n                                    cart.reinit();\n                                }\n                            }\n                        })\n                        .catch(() => {\n                            // eslint-disable-next-line no-console\n                            console.log('local_shopping_cart/cart could not be loaded');\n                        });\n                }\n                // ensure collapse hide handler will reload tables\n                listenToCloseInline(optionid);\n                break;\n            default:\n                // nothing immediate\n                break;\n        }\n\n        // attach click listener\n        element.addEventListener('click', function (evt) {\n            // If hidden or blocked, ignore as before.\n            if (this.classList.contains('hidden')) {\n                return;\n            }\n            if (this.dataset.blocked === 'true') {\n                return;\n            }\n\n            // IMPORTANT: stop Bootstrap / other handlers from running on this click,\n            // and prevent the default anchor navigation.\n            evt.preventDefault();\n            // stop propagation and stop other listeners on the same element from running (Bootstrap's listener is later).\n            evt.stopImmediatePropagation();\n\n            const action = this.dataset.action;\n\n            switch (action) {\n                case 'back':\n                    backToPreviousPage(optionid, userid);\n                    break;\n                case 'continue':\n                case 'continuepost':\n                    continueToNextPage(optionid, userid);\n                    break;\n                case 'checkout':\n                    closeModal(optionid);\n                    if (this.dataset.href) {\n                        window.location.href = this.dataset.href;\n                    }\n                    break;\n                case 'closemodal':\n                    reloadOnBookingView();\n                    closeModal(optionid);\n                    break;\n                case 'closeinline':\n                    reloadOnBookingView();\n                    closeInline(optionid);\n                    break;\n            }\n        });\n\n    });\n}\n\n/**\n * Close bootstrap modal(s) whose id starts with SELECTORS.MODALID + optionid + '_'\n *\n * @param {int} optionid\n * @param {bool} reloadTables\n */\nexport function closeModal(optionid, reloadTables = true) {\n    if (typeof window.bootstrap === 'undefined') {\n        // eslint-disable-next-line no-console\n        console.warn('Bootstrap JS is not available. Cannot programmatically hide modals.');\n    }\n\n    const modalSelectorAll = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"]';\n    const modalEls = Array.from(document.querySelectorAll(modalSelectorAll));\n\n    modalEls.forEach(modalEl => {\n        // Attach a one-time shown.bs.modal listener to hide after shown (like original).\n        const onShown = (e) => {\n            modalEl.removeEventListener('shown.bs.modal', onShown);\n            // eslint-disable-next-line no-console\n            console.log('modal hide after shown', e);\n\n            try {\n                let modalInstance = window.bootstrap?.Modal.getInstance(modalEl) ?? null;\n                if (!modalInstance && typeof window.bootstrap !== 'undefined') {\n                    // create without showing (do not toggle)\n                    modalInstance = new window.bootstrap.Modal(modalEl);\n                }\n                if (modalInstance) {\n                    modalInstance.hide();\n                } else {\n                    // fallback: remove 'show' class and backdrop if present\n                    modalEl.classList.remove('show');\n                }\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.warn('Error hiding bootstrap modal instance', err);\n            }\n\n            if (reloadTables) {\n                reloadAllTables();\n            }\n        };\n\n        modalEl.addEventListener('shown.bs.modal', onShown);\n\n        // Now try to hide it immediately as well.\n        try {\n            let modalInstance = window.bootstrap?.Modal.getInstance(modalEl) ?? null;\n            if (!modalInstance && typeof window.bootstrap !== 'undefined') {\n                modalInstance = new window.bootstrap.Modal(modalEl);\n            }\n            if (modalInstance) {\n                modalInstance.hide();\n            } else {\n                modalEl.classList.remove('show');\n            }\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn('Error hiding bootstrap modal instance (immediate)', err);\n        }\n\n        if (reloadTables) {\n            reloadAllTables();\n        }\n    });\n}\n\n/**\n * Close inline collapse area(s) whose id starts with SELECTORS.INLINEID + optionid + '_'\n *\n * @param {int} optionid\n * @param {bool} reloadTables\n */\nexport function closeInline(optionid, reloadTables = true) {\n    const inlineSelectorAll = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"]';\n    const inlineEls = Array.from(document.querySelectorAll(inlineSelectorAll));\n\n    inlineEls.forEach(inlineEl => {\n        const onShown = (e) => {\n            inlineEl.removeEventListener('shown.bs.collapse', onShown);\n            // eslint-disable-next-line no-console\n            console.log('collapse hide after shown', e);\n\n            try {\n                let collapseInstance = window.bootstrap?.Collapse.getInstance(inlineEl) ?? null;\n                if (!collapseInstance && typeof window.bootstrap !== 'undefined') {\n                    collapseInstance = new window.bootstrap.Collapse(inlineEl, { toggle: false });\n                }\n                if (collapseInstance) {\n                    // toggle will hide it if shown\n                    collapseInstance.toggle();\n                } else {\n                    // fallback toggle: toggle class 'show'\n                    inlineEl.classList.toggle('show');\n                }\n            } catch (err) {\n                // eslint-disable-next-line no-console\n                console.warn('Error toggling bootstrap collapse instance', err);\n            }\n\n            if (reloadTables) {\n                reloadAllTables();\n            }\n        };\n\n        inlineEl.addEventListener('shown.bs.collapse', onShown);\n\n        // Now trigger hide/toggle immediately as well.\n        try {\n            let collapseInstance = window.bootstrap?.Collapse.getInstance(inlineEl) ?? null;\n            if (!collapseInstance && typeof window.bootstrap !== 'undefined') {\n                collapseInstance = new window.bootstrap.Collapse(inlineEl, { toggle: false });\n            }\n            if (collapseInstance) {\n                collapseInstance.toggle();\n            } else {\n                inlineEl.classList.toggle('show');\n            }\n        } catch (err) {\n            // eslint-disable-next-line no-console\n            console.warn('Error toggling bootstrap collapse instance (immediate)', err);\n        }\n\n        if (reloadTables) {\n            reloadAllTables();\n        }\n    });\n}\n\n/**\n * Attach listeners so that hiding inline collapse triggers a table reload.\n *\n * @param {int} optionid\n */\nfunction listenToCloseInline(optionid) {\n    const inlineSelectorAll = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"]';\n    const inlineEls = Array.from(document.querySelectorAll(inlineSelectorAll));\n\n    inlineEls.forEach(inlineEl => {\n        inlineEl.addEventListener('hide.bs.collapse', () => {\n            reloadAllTables();\n        });\n    });\n}\n\n/**\n * Reload on booking view\n *\n */\nfunction reloadOnBookingView() {\n    const onbookondetail = window.location.href.indexOf('optionview.php');\n\n    if (onbookondetail >= 0) {\n        window.location.reload();\n    }\n}\n"],"names":["optionid","userid","shoppingcartisinstalled","console","log","selectorInline","SELECTORS","elements","Array","from","document","querySelectorAll","length","selectorModal","modalSelectorAll","forEach","modalEl","addEventListener","element","dataset","initialized","action","then","module","cart","default","oncashier","window","location","href","indexOf","reinit","catch","inlineSelectorAll","inlineEl","listenToCloseInline","evt","this","classList","contains","blocked","preventDefault","stopImmediatePropagation","closeModal","reloadOnBookingView","closeInline","reloadTables","bootstrap","warn","modalEls","onShown","e","removeEventListener","modalInstance","Modal","getInstance","hide","remove","err","inlineEls","collapseInstance","Collapse","toggle","reload"],"mappings":"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"}